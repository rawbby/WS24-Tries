#include <array_trie.hpp>

#include "test_util.hpp"

int main() {
  static_assert(util::index('\0') == 0);
  static_assert(util::index('$') == 0);
  static_assert(util::index('0') == 1);
  static_assert(util::index('1') == 2);
  static_assert(util::index('2') == 3);
  static_assert(util::index('3') == 4);
  static_assert(util::index('4') == 5);
  static_assert(util::index('5') == 6);
  static_assert(util::index('6') == 7);
  static_assert(util::index('7') == 8);
  static_assert(util::index('8') == 9);
  static_assert(util::index('9') == 10);
  static_assert(util::index('A') == 11);
  static_assert(util::index('B') == 12);
  static_assert(util::index('C') == 13);
  static_assert(util::index('D') == 14);
  static_assert(util::index('E') == 15);
  static_assert(util::index('F') == 16);
  static_assert(util::index('G') == 17);
  static_assert(util::index('H') == 18);
  static_assert(util::index('I') == 19);
  static_assert(util::index('J') == 20);
  static_assert(util::index('K') == 21);
  static_assert(util::index('L') == 22);
  static_assert(util::index('M') == 23);
  static_assert(util::index('N') == 24);
  static_assert(util::index('O') == 25);
  static_assert(util::index('P') == 26);
  static_assert(util::index('Q') == 27);
  static_assert(util::index('R') == 28);
  static_assert(util::index('S') == 29);
  static_assert(util::index('T') == 30);
  static_assert(util::index('U') == 31);
  static_assert(util::index('V') == 32);
  static_assert(util::index('W') == 33);
  static_assert(util::index('X') == 34);
  static_assert(util::index('Y') == 35);
  static_assert(util::index('Z') == 36);
  static_assert(util::index('a') == 37);
  static_assert(util::index('b') == 38);
  static_assert(util::index('c') == 39);
  static_assert(util::index('d') == 40);
  static_assert(util::index('e') == 41);
  static_assert(util::index('f') == 42);
  static_assert(util::index('g') == 43);
  static_assert(util::index('h') == 44);
  static_assert(util::index('i') == 45);
  static_assert(util::index('j') == 46);
  static_assert(util::index('k') == 47);
  static_assert(util::index('l') == 48);
  static_assert(util::index('m') == 49);
  static_assert(util::index('n') == 50);
  static_assert(util::index('o') == 51);
  static_assert(util::index('p') == 52);
  static_assert(util::index('q') == 53);
  static_assert(util::index('r') == 54);
  static_assert(util::index('s') == 55);
  static_assert(util::index('t') == 56);
  static_assert(util::index('u') == 57);
  static_assert(util::index('v') == 58);
  static_assert(util::index('w') == 59);
  static_assert(util::index('x') == 60);
  static_assert(util::index('y') == 61);
  static_assert(util::index('z') == 62);
  static_assert(util::symbol(util::index('0')) == '0');
  static_assert(util::symbol(util::index('1')) == '1');
  static_assert(util::symbol(util::index('2')) == '2');
  static_assert(util::symbol(util::index('3')) == '3');
  static_assert(util::symbol(util::index('4')) == '4');
  static_assert(util::symbol(util::index('5')) == '5');
  static_assert(util::symbol(util::index('6')) == '6');
  static_assert(util::symbol(util::index('7')) == '7');
  static_assert(util::symbol(util::index('8')) == '8');
  static_assert(util::symbol(util::index('9')) == '9');
  static_assert(util::symbol(util::index('A')) == 'A');
  static_assert(util::symbol(util::index('B')) == 'B');
  static_assert(util::symbol(util::index('C')) == 'C');
  static_assert(util::symbol(util::index('D')) == 'D');
  static_assert(util::symbol(util::index('E')) == 'E');
  static_assert(util::symbol(util::index('F')) == 'F');
  static_assert(util::symbol(util::index('G')) == 'G');
  static_assert(util::symbol(util::index('H')) == 'H');
  static_assert(util::symbol(util::index('I')) == 'I');
  static_assert(util::symbol(util::index('J')) == 'J');
  static_assert(util::symbol(util::index('K')) == 'K');
  static_assert(util::symbol(util::index('L')) == 'L');
  static_assert(util::symbol(util::index('M')) == 'M');
  static_assert(util::symbol(util::index('N')) == 'N');
  static_assert(util::symbol(util::index('O')) == 'O');
  static_assert(util::symbol(util::index('P')) == 'P');
  static_assert(util::symbol(util::index('Q')) == 'Q');
  static_assert(util::symbol(util::index('R')) == 'R');
  static_assert(util::symbol(util::index('S')) == 'S');
  static_assert(util::symbol(util::index('T')) == 'T');
  static_assert(util::symbol(util::index('U')) == 'U');
  static_assert(util::symbol(util::index('V')) == 'V');
  static_assert(util::symbol(util::index('W')) == 'W');
  static_assert(util::symbol(util::index('X')) == 'X');
  static_assert(util::symbol(util::index('Y')) == 'Y');
  static_assert(util::symbol(util::index('Z')) == 'Z');
  static_assert(util::symbol(util::index('a')) == 'a');
  static_assert(util::symbol(util::index('b')) == 'b');
  static_assert(util::symbol(util::index('c')) == 'c');
  static_assert(util::symbol(util::index('d')) == 'd');
  static_assert(util::symbol(util::index('e')) == 'e');
  static_assert(util::symbol(util::index('f')) == 'f');
  static_assert(util::symbol(util::index('g')) == 'g');
  static_assert(util::symbol(util::index('h')) == 'h');
  static_assert(util::symbol(util::index('i')) == 'i');
  static_assert(util::symbol(util::index('j')) == 'j');
  static_assert(util::symbol(util::index('k')) == 'k');
  static_assert(util::symbol(util::index('l')) == 'l');
  static_assert(util::symbol(util::index('m')) == 'm');
  static_assert(util::symbol(util::index('n')) == 'n');
  static_assert(util::symbol(util::index('o')) == 'o');
  static_assert(util::symbol(util::index('p')) == 'p');
  static_assert(util::symbol(util::index('q')) == 'q');
  static_assert(util::symbol(util::index('r')) == 'r');
  static_assert(util::symbol(util::index('s')) == 's');
  static_assert(util::symbol(util::index('t')) == 't');
  static_assert(util::symbol(util::index('u')) == 'u');
  static_assert(util::symbol(util::index('v')) == 'v');
  static_assert(util::symbol(util::index('w')) == 'w');
  static_assert(util::symbol(util::index('x')) == 'x');
  static_assert(util::symbol(util::index('y')) == 'y');
  static_assert(util::symbol(util::index('z')) == 'z');
}
